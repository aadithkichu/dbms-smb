# Define a variable for the base URL. This is the correct syntax for the REST Client extension.
@host = http://localhost:3000

###
# @name loginWithEmail
# Login a user or admin. The `authController.js` uses a single `identifier` field
# which can be either an email or a phone number.
#
# Controller logic: const { identifier, password } = req.body;
POST {{host}}/api/auth/login
Content-Type: application/json

{
  "identifier": "user@example.com",
  "password": "password123"
}

###
# @name loginWithPhone
# Alternative login using a phone number as the identifier.
POST {{host}}/api/auth/login
Content-Type: application/json

{
  "identifier": "9876543210",
  "password": "password123"
}

###
# @name logout
# Logout the current user and destroy the session. No request body needed.
GET {{host}}/api/auth/logout

###
# ----------------------------------------------------------------
# USER REGISTRATION WORKFLOW
# The following requests demonstrate the required 3-step sequence
# for registering a new user, as per your controller logic.
# ----------------------------------------------------------------

###
# @name sendOTPForRegistration
# STEP 1: Send an OTP to the user's phone number. This is a prerequisite for registration.
#
# Controller logic: otpController.js -> sendOTP
POST {{host}}/api/auth/send-otp
Content-Type: application/json

{
  "identifier": "9876543210"
}

###
# @name verifyOTPForRegistration
# STEP 2: Verify the OTP to confirm ownership of the phone number. This marks the
# phone as 'verified' in the database, which the register endpoint checks.
#
# Controller logic: otpController.js -> verifyOTP
POST {{host}}/api/auth/verify-otp
Content-Type: application/json

{
  "identifier": "9876543210",
  "otp": "123456"
}

###
# @name registerUser
# STEP 3: Register a new user after their phone has been verified.
# If the phone is not verified (steps 1 & 2 were not completed), this request
# will fail with a 403 Forbidden error.
#
# Controller logic: authController.js -> register
POST {{host}}/api/auth/register
Content-Type: application/json

{
  "name": "Test User",
  "phone": "9876543210",
  "password": "password123",
  "adminCode": ""
}

###
# @name registerAdmin
# STEP 3 (Alternative): Register a new admin user.
# This requires a valid `adminCode` which should match the `ADMIN_SECRET`
# in the environment variables. The phone number must still be verified via OTP first.
POST {{host}}/api/auth/register
Content-Type: application/json

{
  "name": "Admin User",
  "phone": "9876543211",
  "password": "adminPassword123",
  "adminCode": "your_secret_admin_code_here"
}


###
# @name resetPasswordWithPhone
# Reset password using a phone number and a valid OTP.
#
# Controller logic: const { phone, email, otp, newPassword } = req.body;
POST {{host}}/api/auth/reset-password
Content-Type: application/json

{
  "phone": "9876543210",
  "email": null,
  "otp": "123456",
  "newPassword": "newPassword456"
}

###
# @name resetPasswordWithEmail
# Reset password using an email and a valid OTP.
POST {{host}}/api/auth/reset-password
Content-Type: application/json

{
  "phone": null,
  "email": "user@example.com",
  "otp": "123456",
  "newPassword": "newPassword456"
}


###
# @name getAllMovies
# Get a list of all movies. No request body needed.
GET {{host}}/api/movies

###
# @name getProfile
# Get the profile of the currently authenticated user. No request body needed.
GET {{host}}/api/users/me

###
# @name updatePassword
# Update the password for the currently authenticated user.
#
# Controller logic: const { currentPassword, newPassword, confirmPassword } = req.body;
PUT {{host}}/api/users/update-password
Content-Type: application/json

{
  "currentPassword": "password123",
  "newPassword": "newPassword456",
  "confirmPassword": "newPassword456"
}

###
# @name updateName
# Update the name for the currently authenticated user.
#
# Controller logic: const name = req.body.name?.trim();
PUT {{host}}/api/users/update-name
Content-Type: application/json

{
  "name": "New Test User"
}

###
# @name updatePhone
# Update the phone number for the currently authenticated user after OTP verification.
#
# Controller logic: const phone = req.body.phone?.trim(); const otp = req.body.otp?.trim();
PUT {{host}}/api/users/update-phone
Content-Type: application/json

{
  "phone": "9988776655",
  "otp": "123456"
}

###
# @name updateEmail
# Update the email for the currently authenticated user after OTP verification.
#
# Controller logic: const email = req.body.email?.trim(); const otp = req.body.otp?.trim();
PUT {{host}}/api/users/update-email
Content-Type: application/json

{
  "email": "new.user@example.com",
  "otp": "123456"
}

###
# @name deleteProfile
# Delete the profile of the currently authenticated user. No request body needed.
DELETE {{host}}/api/users/me
